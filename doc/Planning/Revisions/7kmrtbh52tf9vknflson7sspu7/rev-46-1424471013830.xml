<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="7kmrtbh52tf9vknflson7sspu7" theme="xminddefaultthemeid2014" timestamp="1424471003521" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="0ea3fbl4cejvsje8r30kcj5865" structure-class="org.xmind.ui.map.unbalanced" timestamp="1424470798874"><title>Hypermap</title><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>3</right-number></content></extension></extensions><children><topics type="attached"><topic id="09r1agiobpf751nddlj1vkhks0" timestamp="1421502787090"><title>Data representation</title><children><topics type="attached"><topic id="6ci0h13824jp75g1rkufcko2kq" timestamp="1423349447945"><title>History/Time</title><children><topics type="attached"><topic branch="folded" id="2tapo6c0nfckkp4ci8haa6162q" timestamp="1421079261220"><title>Time Annotation an orgthogonal property ?</title></topic><topic branch="folded" id="7rgk9mvhr9gpq0lskr4ne52pak" timestamp="1421079261221"><title>"Continuous" Time ?</title><children><topics type="attached"><topic branch="folded" id="37uhn9dg5pe84ous4lgepsmmes" timestamp="1421079261222"><title>Every char?</title></topic><topic branch="folded" id="4vjp26007qdmcu78256v4ifr6r" timestamp="1421079261222"><title>Every commit?</title></topic><topic branch="folded" id="78v9seusiafudjtolhl5pi0djn" timestamp="1421079261222"><title>Advantages of continuous time:</title><children><topics type="attached"><topic branch="folded" id="04mbm3vd9k5jiu345a51fv75t1" timestamp="1421079261222"><title>Real-time collaboration</title></topic><topic branch="folded" id="5sq1atq240c6t7mtgt5fhvhkj7" timestamp="1421079261223"><title svg:width="500">More accurate for automated analysis (resource use, retrospectives, etc)</title></topic><topic branch="folded" id="5hf1kvq9vhdu6dc7bnd8pa5qi3" timestamp="1421079261223"><title>Finer-grained merge visualization</title></topic><topic branch="folded" id="7vuo2jscbi9gsj5gihk1bs0oq8" timestamp="1421079261223"><title svg:width="500">Finer-grained visualization of dependencies as they emerge</title></topic></topics></children></topic></topics></children></topic><topic id="5gvufmm8me29vsrc3mb5jov8ot" timestamp="1423349486751"><title>Mindmaps have timestamps</title><marker-refs><marker-ref marker-id="people-purple"/></marker-refs></topic></topics></children></topic><topic id="1gv3n799haruqfu8hkadt2a7f5" timestamp="1423349681136"><title>Structure</title><children><topics type="attached"><topic branch="folded" id="3g12ed5cjhbl09nt3nqbpk6t4g" style-id="$NULL$topic" timestamp="1424203548547"><title>Directed Cyclic Graph? Or Directed Acyclic Graph?</title><children><topics type="attached"><topic branch="folded" id="33rgek9npdbfubqp1186cv59gu" timestamp="1424203548551"><title>Discussion, debate, links</title><children><topics type="attached"><topic branch="folded" id="1v204416npjcffeevddlq1i508" timestamp="1424203548552"><title>You can turn any DCG into a DAG through modular decomposition</title><notes><html><xhtml:p>https://en.wikipedia.org/wiki/Modular_decomposition</xhtml:p><xhtml:p/><xhtml:p>http://openclassroom.stanford.edu/MainFolder/VideoPage.php?course=IntroToAlgorithms&amp;video=CS161L6P1</xhtml:p><xhtml:p/><xhtml:p>The clojure.algo.graph library will handle some of that for us: https://github.com/clojure/algo.graph/blob/master/src/main/clojure/clojure/algo/graph.clj</xhtml:p><xhtml:p>(see the component-graph function)</xhtml:p><xhtml:p/><xhtml:p>This works in linear time (on #nodes + #edges).</xhtml:p></html><plain>https://en.wikipedia.org/wiki/Modular_decomposition

http://openclassroom.stanford.edu/MainFolder/VideoPage.php?course=IntroToAlgorithms&amp;video=CS161L6P1

The clojure.algo.graph library will handle some of that for us: https://github.com/clojure/algo.graph/blob/master/src/main/clojure/clojure/algo/graph.clj
(see the component-graph function)

This works in linear time (on #nodes + #edges).</plain></notes></topic><topic branch="folded" id="24vacg9aua2d0758gf3hstjckc" timestamp="1424203548553"><title>Argument for DCG:</title><notes><html><xhtml:p>Keeps us safely general. Helps us avoid the risk that one special relationship will turn into a whole host, many of which we can't possibly anticipate (related: think about where we can provide generalization facilities for stuff like that). Can be turned into DAG when we need to, perhaps identifying implicit packages along the way.</xhtml:p></html><plain>Keeps us safely general. Helps us avoid the risk that one special relationship will turn into a whole host, many of which we can't possibly anticipate (related: think about where we can provide generalization facilities for stuff like that). Can be turned into DAG when we need to, perhaps identifying implicit packages along the way.</plain></notes><children><topics type="attached"><topic branch="folded" id="3r6d7uvte9i6fd3cpd1l7q0m5u" timestamp="1424203548554"><title>Warning: recursive println gets weird.</title></topic></topics></children></topic><topic branch="folded" id="7edbcmjravomgb47ialv8lccbh" timestamp="1424203548555"><title>Argument for DAG:</title><notes><html><xhtml:p>Seems like mind maps themselves are basically DAGs (see this one, for example). DAGs give us some nice advantages in terms of simplicity of implementation, efficiency, and abilities (eg may be impossible to auto-generate a unique codebase for a DCG where no connections are considered special). </xhtml:p><xhtml:p/><xhtml:p>Tree representations:</xhtml:p><xhtml:p>http://www.exampler.com/blog/2010/09/01/editing-trees-in-clojure-with-clojurezip/</xhtml:p><xhtml:p>https://stackoverflow.com/questions/1787708/representing-a-tree-in-clojure</xhtml:p><xhtml:p>http://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/</xhtml:p><xhtml:p/></html><plain>Seems like mind maps themselves are basically DAGs (see this one, for example). DAGs give us some nice advantages in terms of simplicity of implementation, efficiency, and abilities (eg may be impossible to auto-generate a unique codebase for a DCG where no connections are considered special). 

Tree representations:
http://www.exampler.com/blog/2010/09/01/editing-trees-in-clojure-with-clojurezip/
https://stackoverflow.com/questions/1787708/representing-a-tree-in-clojure
http://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/
</plain></notes></topic></topics></children></topic><topic branch="folded" id="6js4dhns8c5f3euddam9ltmjil" timestamp="1424203548556"><title>Hypermap is a DAG</title></topic><topic branch="folded" id="3p06qvk5q2sditepru9u1q0ljg" style-id="3det9qvrqmlk8vg4a3pl386nb6" timestamp="1424203548558"><title>Mindmap is a DCG in terms of abstraction,
but a DAG in terms of implementation.</title><children><topics type="attached"><topic branch="folded" id="5g1jcn0i5l7eke6m78demj9322" timestamp="1424203548559"><title>There are zippers for graphs, too.</title><notes><html><xhtml:p>https://github.com/james-henderson/graph-zip</xhtml:p><xhtml:p/><xhtml:p>^ Very cool.</xhtml:p></html><plain>https://github.com/james-henderson/graph-zip

^ Very cool.</plain></notes></topic></topics></children></topic><topic branch="folded" id="5mtk7btf7padvij8usdn81763s" timestamp="1424203548561"><title>Representing trees in clojure</title><children><topics type="attached"><topic branch="folded" id="0p6k625g5u07ohnu0k44uuv1g1" timestamp="1424203548562"><title>Walk</title><notes><html><xhtml:p>http://clojuredocs.org/clojure.walk</xhtml:p><xhtml:p/><xhtml:p>Relatively optimized for dealing with code. Relatively simple (compared to zip)</xhtml:p><xhtml:p/></html><plain>http://clojuredocs.org/clojure.walk

Relatively optimized for dealing with code. Relatively simple (compared to zip)
</plain></notes></topic><topic branch="folded" id="4vk3u1r6b43a89meago0vbn9fn" timestamp="1424203548563"><title>Zip</title><notes><html><xhtml:p>API: https://clojure.github.io/clojure/clojure.zip-api.html</xhtml:p><xhtml:p>WTF is a zipper?: https://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf</xhtml:p><xhtml:p/></html><plain>API: https://clojure.github.io/clojure/clojure.zip-api.html
WTF is a zipper?: https://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf
</plain></notes></topic><topic branch="folded" id="6g2h85t4l19svibqt3ksu9fd4j" timestamp="1424203548564"><title>Other</title><notes><html><xhtml:p>tree-seq: https://clojuredocs.org/clojure.core/tree-seq</xhtml:p><xhtml:p/><xhtml:p>assoc-in and update-in</xhtml:p><xhtml:p/><xhtml:p>Articles:</xhtml:p><xhtml:p>Tree visitors in clojure: http://www.ibm.com/developerworks/library/j-treevisit/</xhtml:p><xhtml:p>Binary search trees: http://macromancy.com/2014/04/09/data-structures-clojure-trees.html</xhtml:p><xhtml:p/></html><plain>tree-seq: https://clojuredocs.org/clojure.core/tree-seq

assoc-in and update-in

Articles:
Tree visitors in clojure: http://www.ibm.com/developerworks/library/j-treevisit/
Binary search trees: http://macromancy.com/2014/04/09/data-structures-clojure-trees.html
</plain></notes></topic></topics></children></topic></topics></children><marker-refs><marker-ref marker-id="symbol-question"/></marker-refs><notes><html><xhtml:p>Some resources on graph and tree representation in clojure:</xhtml:p><xhtml:p/><xhtml:p>http://clj-me.cgrand.net/2010/01/16/graph-structured-stacks-in-clojure/</xhtml:p><xhtml:p>https://stackoverflow.com/questions/1787708/representing-a-tree-in-clojure</xhtml:p><xhtml:p>https://stackoverflow.com/questions/25843162/update-tree-in-clojure</xhtml:p><xhtml:p>https://stackoverflow.com/questions/14854780/traversing-iterating-visiting-trees-in-clojure</xhtml:p></html><plain>Some resources on graph and tree representation in clojure:

http://clj-me.cgrand.net/2010/01/16/graph-structured-stacks-in-clojure/
https://stackoverflow.com/questions/1787708/representing-a-tree-in-clojure
https://stackoverflow.com/questions/25843162/update-tree-in-clojure
https://stackoverflow.com/questions/14854780/traversing-iterating-visiting-trees-in-clojure</plain></notes></topic><topic branch="folded" id="1sihvtkql4sqh4558c3jt0i1mv" timestamp="1421079261233"><title>Immutablish</title></topic><topic id="67v5870b2lf5p50gks953nokqg" timestamp="1421619393703"><title>Node</title><children><topics type="attached"><topic branch="folded" id="0of752rkjpg3np2d1h104t5g9u" timestamp="1421079261234"><title>Artifacts from nodes ?</title></topic></topics></children></topic><topic branch="folded" id="2sp1e6cbdaja57o717msrutph6" timestamp="1421079261234"><title>Need to add abstraction to imports to support reparenting nodes?</title></topic><topic branch="folded" id="0hlgbmem2on6gf30vpqmosorc5" timestamp="1421079261235"><title>Plan on adding attributes to both nodes and edges.</title><notes><html><xhtml:p>See comments 1 &amp; 2 of this article: http://clj-me.cgrand.net/2010/01/16/graph-structured-stacks-in-clojure/#comment-221</xhtml:p><xhtml:p/><xhtml:p>Also:</xhtml:p><xhtml:p>http://www.geeksforgeeks.org/graph-and-its-representations/</xhtml:p><xhtml:p>https://www.python.org/doc/essays/graphs/</xhtml:p><xhtml:p/></html><plain>See comments 1 &amp; 2 of this article: http://clj-me.cgrand.net/2010/01/16/graph-structured-stacks-in-clojure/#comment-221

Also:
http://www.geeksforgeeks.org/graph-and-its-representations/
https://www.python.org/doc/essays/graphs/
</plain></notes></topic><topic id="1viofur0v16h53iupr4e4ambk8" timestamp="1422505463456"><title svg:width="500">Data types -- defrecord vs defprotocol vs pattern matching 
(defun, cone.match) vs schema</title></topic><topic id="4t9fjkcckps4rv5ggml98pblhs" timestamp="1423349681141"><title>Object id</title><children><topics type="attached"><topic id="1v8642t39e6pf9g9an3leubb7n" timestamp="1424470927912"><title>Object id is just the hash of the contents</title></topic><topic id="497ideah835k0upt5iv7g5jhot" timestamp="1423349674677"><title>Create new-hypermap function which puts in just a timestamp and then a hash based on that.</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="2pvif84vodb9ltjojlg8h8vnk2" timestamp="1424470772390"><title>Core Value-Add</title><children><topics type="attached"><topic id="6k36hghrmmort79pbp3b8r4qri" style-id="43qvedj97dctinmhc4s1c5hll2" timestamp="1424190718269"><title>IDE</title><children><topics type="attached"><topic branch="folded" id="0tmvtq97d2bgqktqkh92hg5t6l" timestamp="1421079261244"><title>eases refactoring</title></topic><topic id="5558g6a0u49tuje3rnjmnt84us" timestamp="1421438545866"><title>"Architectural" documentation is self explanatory</title></topic><topic branch="folded" id="7son361lcsmvn40vqk4ln3ths4" timestamp="1421079261245"><title>True language-independant literate programming</title></topic><topic branch="folded" id="2rucnd1hcl8iv3i0vmlgfp4ul7" timestamp="1421079261245"><title>Mind map is *canonical* representation of codebase</title></topic><topic branch="folded" id="3fcas9pbsp9qkjpitjctfqgjm6" timestamp="1421079261246"><title>Separation between planning and development vanishes</title></topic><topic branch="folded" id="52e497hsk454k09pmk94kgpbl0" timestamp="1421079261246"><title>Critical that existing projects can be imported</title><children><topics type="attached"><topic branch="folded" id="2vje3hrfep35roafscmdcf87cl" timestamp="1421079261247"><title>We don't want to write the damn editor.</title></topic><topic branch="folded" id="25i1tj295nmv9uj5og37ne1c4s" timestamp="1421079261247"><title>Ideally, be editor-agnostic</title></topic></topics></children></topic><topic branch="folded" id="7pqc1jffoli41rqu2gh7op4q83" timestamp="1421079261248"><title>Per-language specialization as needed</title><children><topics type="attached"><topic branch="folded" id="34p8blleho852flsdvtg7smhhh" timestamp="1421079261248"><title>What build tool to invoke and how</title></topic><topic branch="folded" id="6t5j3ns3jek88tdkbolbnbria2" timestamp="1421079261248"><title>Constraints on, eg, one-class-per-file</title></topic><topic branch="folded" id="3t9lm82bcq4r1dr07ghsi3gsc6" timestamp="1421079261249"><title>REPL</title></topic></topics></children></topic><topic branch="folded" id="1m7vth3jplb72abdqfsvf3r3ts" timestamp="1421079261249"><title>To what extent can we provide:</title><children><topics type="attached"><topic branch="folded" id="491t07r8c0fpn3doqsj5pe04tf" timestamp="1421079261249"><title>Dataflow visualization</title></topic><topic branch="folded" id="1ndptpeqv119c7o5hon99mi712" timestamp="1421079261250"><title>Context-sensitive REPL</title></topic></topics></children></topic><topic branch="folded" id="1rghb95ehq2ssehnee4rcuag2j" timestamp="1421079261250"><title>Handling test functions?</title><children><topics type="attached"><topic branch="folded" id="3a832gug1jr1r6oe496voc3i0d" timestamp="1421079261250"><title>Doctest as interesting literate example</title></topic></topics></children></topic><topic branch="folded" id="35vu51es7v0b4agg53kpdcop13" timestamp="1421079261251"><title>Consider representation as an approximate DAG</title><children><topics type="attached"><topic branch="folded" id="7eujb566iv1ka07rac4vrqv20j" timestamp="1421079261251"><title>Non-DAG as code smell</title></topic></topics></children></topic><topic branch="folded" id="1qej8lmvbtvqc1t0unmofahdqb" timestamp="1421079261252"><title>Auto-detect cross-cutting concerns</title><children><topics type="attached"><topic branch="folded" id="2468k0vdu1jbpc9dis3d1hfuns" timestamp="1421079261252"><title>Calls to libraries outside the project don't count (by default). Other modules called by many functions can be assumed to be cross-cutting concerns.</title></topic><topic branch="folded" id="1h6iv8o4uuklot12fnlbfc3vrg" timestamp="1421079261252"><title>Proxies</title><notes><html><xhtml:p>The proxy system proposed for JavaScript may provide an interesting example of how to model crosscutting concerns. Or the fact that we're doing it in clojure may mean we don't need anything so heavyweight.</xhtml:p><xhtml:p>http://soft.vub.ac.be/~tvcutsem/proxies/</xhtml:p></html><plain>The proxy system proposed for JavaScript may provide an interesting example of how to model crosscutting concerns. Or the fact that we're doing it in clojure may mean we don't need anything so heavyweight.
http://soft.vub.ac.be/~tvcutsem/proxies/</plain></notes></topic></topics></children></topic><topic id="0om3ocgvmbo1bago74l92igqpt" timestamp="1421438578742"><title svg:width="500">Autogenerated docs are automatically kept up-to-date and shown with the appropriate node</title></topic><topic id="6ctqg8nigfg8r5u3tc847969i5" timestamp="1424190772370"><title>How do we query (and let users query) code?</title><children><topics type="attached"><topic id="5nhdvahl07qqorar8psm1j3bjg" timestamp="1424190689331"><title>Known Tools/Approaches</title><children><topics type="attached"><topic id="76a08h2h2hsqem758u378vmtjd" timestamp="1424190658224"><title>Grok</title></topic><topic id="26c8cq77grned1laegf1se7anb" timestamp="1424190663057"><title>SQL</title></topic><topic id="1e9fvhdnuh03g7tfp0a3v0eb92" timestamp="1424190665857"><title>XPath</title></topic></topics></children></topic><topic id="1ih8550d3c5oce018pk525oart" timestamp="1424190759298"><title>core.logic and/or core.match</title></topic></topics></children></topic><topic id="4s6h2rr49q4j2dlndebm4vnqj3" timestamp="1424190732326"><title>How do we parse code?</title><children><topics type="attached"><topic id="3csstfgu70lf8i6f06b0q6luc1" timestamp="1424190727522"><title>Not at all, if possible, because it's a big project</title></topic><topic id="3ci9i7hceaavd5vrp8atrl4fqk" timestamp="1424190745698"><title>Grok: "The compiler is the only thing that truly knows the language"</title></topic></topics></children></topic></topics></children></topic><topic branch="folded" id="3pbp1l3vc8ltac24ra214oo761" timestamp="1421079261254"><title svg:width="500">Project management /
A better mindmap</title><children><topics type="attached"><topic branch="folded" id="0gil6omb9q1jsg6qhs3p7jfvdh" timestamp="1421079261254"><title>Interface to traditional PM</title></topic><topic branch="folded" id="50jjq48ceg6ti68tl4bakpn9tj" timestamp="1421079261254"><title>Can provide more accuracy to estimates and resource planning</title></topic><topic branch="folded" id="2fs6bg4r8kh36rknu8sdf5j8rv" timestamp="1421079261255"><title>Better automatic project analysis</title></topic><topic branch="folded" id="74msprgqogvq5g6doo7e84l064" timestamp="1421079261255"><title>High degree of flexibility in queries attributes</title><children><topics type="attached"><topic branch="folded" id="1837ont3gjukbeq415saqdu24r" timestamp="1421079261255"><title>Consider SQL</title></topic></topics></children></topic><topic branch="folded" id="7i8ifabm81vvajnsdqb6umiabe" timestamp="1421079261256"><title>Document attachment and/or linking.</title><children><topics type="attached"><topic branch="folded" id="6b1ghosev0f2rki46juil86agg" timestamp="1421079261256"><title>Document provenance built deeply in. Canonical location for supporting documents.</title></topic></topics></children></topic><topic branch="folded" id="5smmvrkjg5721ntovrevlifmig" timestamp="1421079261257"><title>Dependency management</title></topic><topic branch="folded" id="6h4kr51lhps6c2p6s664ndi7mn" timestamp="1421079261257"><title>Charting</title></topic></topics></children></topic><topic branch="folded" id="5d6it1f9vij8eom286306epitv" timestamp="1421079261257"><title>Git 2.0 ?</title></topic><topic branch="folded" id="48r5c26o0kghomdrq7sr7jtamn" timestamp="1421079261257"><title>Merge Tool</title></topic><topic branch="folded" id="1se2u5i0u70l2cmbmv70b18sjv" timestamp="1421079261258"><title>Contraint programming as first class operation</title></topic><topic branch="folded" id="393n133i8cprr3ck238as6hepu" timestamp="1421079261258"><title>Reactive capabilities</title><children><topics type="attached"><topic branch="folded" id="3db8rs3p2bsg33nkt6oavlgs7i" timestamp="1421079261259"><title>Allowed for from beginning</title></topic><topic branch="folded" id="3t78naado90dpsou1p7pl9im06" timestamp="1421079261259"><title>Chat transcript with links</title></topic></topics></children><notes><html><xhtml:p>(Chat transcript, with some links)</xhtml:p><xhtml:p/><xhtml:p>Reactive programming! That was the term I was looking for.</xhtml:p><xhtml:p>6:04 PM	</xhtml:p><xhtml:p/><xhtml:p>Inline image 1</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>Huh, don't think I've heard that before</xhtml:p><xhtml:p>6:05 PM</xhtml:p><xhtml:p>Subset of dataflow languages.https://en.wikipedia.org/wiki/Reactive_programming</xhtml:p><xhtml:p>Sounds like it makes an interesting strategy for web programming, which I hadn't thought of.</xhtml:p><xhtml:p>6:12 PM	</xhtml:p><xhtml:p/><xhtml:p>Inline image 2</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>Riiiight, exactly reactive.   </xhtml:p><xhtml:p>;)</xhtml:p><xhtml:p>6:16 PM</xhtml:p><xhtml:p>^ Sarcasm?</xhtml:p><xhtml:p>http://radar.oreilly.com/2012/12/emerging-languages-spotlight-elm.html</xhtml:p><xhtml:p>https://pypi.python.org/pypi/Trellis</xhtml:p><xhtml:p>6:17 PM	</xhtml:p><xhtml:p/><xhtml:p>Inline image 3</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>Lol, nope not sarcastic</xhtml:p><xhtml:p>6:18 PM</xhtml:p><xhtml:p>I like the idea of callback management as a language feature.</xhtml:p><xhtml:p>OK, one more link: Pulsar lets you do functional reactive programming in Clojure:http://blog.paralleluniverse.co/2014/02/20/reactive/</xhtml:p><xhtml:p/><xhtml:p>[Later addendum] see also Facebook's React library: https://facebook.github.io/react/docs/why-react.html</xhtml:p><xhtml:p>Clojurescript wrapper for React: http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/</xhtml:p><xhtml:p/></html><plain>(Chat transcript, with some links)

Reactive programming! That was the term I was looking for.
6:04 PM	

Inline image 1
	
Huh, don't think I've heard that before
6:05 PM
Subset of dataflow languages.https://en.wikipedia.org/wiki/Reactive_programming
Sounds like it makes an interesting strategy for web programming, which I hadn't thought of.
6:12 PM	

Inline image 2
	
Riiiight, exactly reactive.   
;)
6:16 PM
^ Sarcasm?
http://radar.oreilly.com/2012/12/emerging-languages-spotlight-elm.html
https://pypi.python.org/pypi/Trellis
6:17 PM	

Inline image 3
	
Lol, nope not sarcastic
6:18 PM
I like the idea of callback management as a language feature.
OK, one more link: Pulsar lets you do functional reactive programming in Clojure:http://blog.paralleluniverse.co/2014/02/20/reactive/

[Later addendum] see also Facebook's React library: https://facebook.github.io/react/docs/why-react.html
Clojurescript wrapper for React: http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/
</plain></notes></topic><topic branch="folded" id="4jcosh9c278m4gsi141ml0cf9e" timestamp="1421079261260"><title>Ontology Mining</title><children><topics type="attached"><topic branch="folded" id="63so91fkkilkomugukuvl00d91" timestamp="1421079261260"><title>Live analysis of project 'health' </title></topic><topic branch="folded" id="16hms6uv91iodnvfug7t7gn0m1" timestamp="1421079261260"><title>Create vetted ontologies as training data for ML</title></topic><topic branch="folded" id="6adbobgfrempkqbg2mdjflp5gf" timestamp="1421079261261"><title>Live training of our own ontologies via deep learning on internal data</title></topic></topics></children></topic><topic id="5qfa3ihi3n937upu6mlmkqtr3b" timestamp="1424470787302"><title>Accessible as text console (eg over ssh)</title></topic></topics></children></topic><topic id="0q6720c31p5i7nu2pnrqbqfu31" timestamp="1421079287947"><title>Novel visualizations</title><children><topics type="attached"><topic branch="folded" id="3btgllks94d7bo3aq4oat58a00" timestamp="1421079261262"><title>Fade out all nodes that don't meet constraint/query</title></topic><topic branch="folded" id="064mbvuq2st3mj1ecm61cl1fnn" timestamp="1421079261263"><title>Automatic view restructing</title></topic><topic branch="folded" id="5uqdnf8p5iqjb070lo7lu2g0cu" timestamp="1421079261263"><title>Outline view (not novel)</title><notes><html><xhtml:p>Simple tree examination:</xhtml:p><xhtml:p/><xhtml:p>(use '[clojure.inspector :only (inspect inspect-tree)])</xhtml:p><xhtml:p>(inspect-tree {:clojure {:creator "Rich" :runs-on-jvm true}})</xhtml:p><xhtml:p/><xhtml:p>http://tech.puredanger.com/2010/02/10/clojure-inspector/</xhtml:p></html><plain>Simple tree examination:

(use '[clojure.inspector :only (inspect inspect-tree)])
(inspect-tree {:clojure {:creator "Rich" :runs-on-jvm true}})

http://tech.puredanger.com/2010/02/10/clojure-inspector/</plain></notes></topic><topic branch="folded" id="1dsb686it6ap070reur588teeu" timestamp="1421079261263"><title>How to visualize execution-level time</title></topic><topic id="0733ja6balvl87o4maevl60eu0" timestamp="1421082157090"><title>Critical to easily highlight recent additions</title><children><topics type="attached"><topic branch="folded" id="4toae0qd37ah3bb9sajiie4j66" timestamp="1421079261264"><title>(I'm already finding that it's hard to notice new stuff)</title></topic><topic id="13vm5bu9398p60tumtens991u0" timestamp="1421079343487"><title>Diff/timeline makes it easy to show new-since-time-t</title></topic><topic id="59hbuq12fbjbj7cgngkkujbr37" timestamp="1421079376675"><title>But think hard about interface.</title><children><topics type="attached"><topic id="4oct31sc54042jcelssp44guas" timestamp="1421079419213"><title>Maybe consider storing multiple selectable viewpoints with the hypermap</title></topic></topics></children></topic><topic id="021omms78po0domqq7cgemjdop" timestamp="1421082201528"><title/><xhtml:img svg:height="65" svg:width="48" xhtml:src="xap:attachments/5bi5sqbmqdo9novp8knmbpna12.jpg"/></topic></topics></children></topic></topics></children></topic><topic id="0u7t7e1glg2ujmecd32lu9iesr" timestamp="1424190787986"><title>Examples</title><children><topics type="attached"><topic branch="folded" id="7vpksodot7rd6a5scsm120bprp" timestamp="1421079261265"><title>LEO</title></topic><topic id="61lh2gmoj6id95vsda3iboqgfl" timestamp="1423161004156"><title>Mind map software</title><notes><html><xhtml:p>Couple of ideas worth stealing in here:</xhtml:p><xhtml:p>	http://www.mindgenius.com/PDFs/PMTodayMindgeniusReview2013.aspx</xhtml:p><xhtml:p/></html><plain>Couple of ideas worth stealing in here:
	http://www.mindgenius.com/PDFs/PMTodayMindgeniusReview2013.aspx
</plain></notes><children><topics type="attached"><topic id="5aj2tb3e95radhbukh0mnda5aa" timestamp="1423160962351"><title>iMindMap</title><notes><html><xhtml:p>Includes a few other, non-mind-mappy views, which is something we'll want to think about too.</xhtml:p><xhtml:p/><xhtml:p>http://thinkbuzan.com/products/imindmap/</xhtml:p></html><plain>Includes a few other, non-mind-mappy views, which is something we'll want to think about too.

http://thinkbuzan.com/products/imindmap/</plain></notes></topic><topic id="7l2vrmq0s9i03tc7eesse8nbo0" timestamp="1423163550876"><title>MindManager</title><notes><html><xhtml:p>Looks like it has good Gantt charts, budget roll-ups, etc.</xhtml:p><xhtml:p>Maybe one of the more mature projects out there?</xhtml:p><xhtml:p/><xhtml:p>Has filters, although they don't seem to work very well.</xhtml:p><xhtml:p/><xhtml:p>http://www.mindjet.com/mindmanager/features/business-project-tools/</xhtml:p></html><plain>Looks like it has good Gantt charts, budget roll-ups, etc.
Maybe one of the more mature projects out there?

Has filters, although they don't seem to work very well.

http://www.mindjet.com/mindmanager/features/business-project-tools/</plain></notes></topic></topics></children></topic><topic branch="folded" id="1deqbphujptpdn00hjvj9uh5un" timestamp="1421079261266"><title>Emacs: org-mode and babel</title><notes><html><xhtml:p>http://orgmode.org/worg/org-contrib/babel/intro.html</xhtml:p></html><plain>http://orgmode.org/worg/org-contrib/babel/intro.html</plain></notes></topic><topic branch="folded" id="3vdgbscf55f72cig8c8kpak6bp" timestamp="1421079261266"><title>Bret Victor</title></topic><topic id="1vh5g5gbjn6s3foemj7tuckjij" timestamp="1424190847830"><title>Tangential inspirations</title><children><topics type="attached"><topic id="7k71ghg78dl5sbsjaia81c8qs6" timestamp="1424192758418"><title>Grok</title><notes><html><xhtml:p>https://vimeo.com/16069687</xhtml:p><xhtml:p>Yegge project at google</xhtml:p><xhtml:p/><xhtml:p>Possibly dead.</xhtml:p><xhtml:p/><xhtml:p><xhtml:img xhtml:src="xap:attachments/6km023g5v8vmb5dvsatfb2t7ou.png"/></xhtml:p></html><plain>https://vimeo.com/16069687
Yegge project at google

Possibly dead.

</plain></notes></topic><topic id="4osli202c9mls23j5dea2marrg" timestamp="1424190861507"><title>Code bubbles?</title><notes><html><xhtml:p>I have only vague memories of it.</xhtml:p><xhtml:p/><xhtml:p>http://www.andrewbragdon.com/codebubbles_site.asp</xhtml:p><xhtml:p/></html><plain>I have only vague memories of it.

http://www.andrewbragdon.com/codebubbles_site.asp
</plain></notes></topic></topics></children></topic></topics></children></topic><topic id="6a5s0vqg84duhbe1lg0325jfuu" timestamp="1421502773699"><title>Rough implementation phases</title><children><topics type="attached"><topic id="713e9hvs7e4rrmirs0jr1k2ig0" timestamp="1421502779707"><title>Data representation</title><children><topics type="attached"><topic branch="folded" id="02a9l2dum5u395kce70moiuq9r" timestamp="1421079261269"><title>File representation of mm (and preparation for git integration)</title></topic></topics></children></topic><topic branch="folded" id="41o2jueqat6usqlte2cq4r7bqh" timestamp="1424471003521"><title>Text console</title></topic><topic branch="folded" id="6mm74olishvshtb8gja3uhr4qh" timestamp="1421079261270"><title>Node addition, refactoring</title></topic><topic branch="folded" id="1f3qbotp8aqui1609k1pc22fqs" timestamp="1421079261270"><title>Output-to-code</title></topic><topic branch="folded" id="3mhjttr63n8stjealthoc0i90d" timestamp="1421079261271"><title>Annotations which functions can be run on</title><marker-refs><marker-ref marker-id="symbol-question"/></marker-refs><notes><html><xhtml:p>George -- will you clarify this? Thx</xhtml:p></html><plain>George -- will you clarify this? Thx</plain></notes></topic><topic branch="folded" id="57k472uvq0q4vpglgea8t19ph0" timestamp="1421079261271"><title>Import of existing projects</title></topic><topic id="0r6tr0nmnj0okfn6js745kphip" timestamp="1423094046093"><title>Front end display</title><children><topics type="attached"><topic branch="folded" id="7lh7gq9c7havikucg6094op48t" timestamp="1421079261272"><title>In browser?</title><children><topics type="attached"><topic branch="folded" id="3cg064a7ve11glhgaoupjnq3h0" timestamp="1421079261272"><title>D3?</title><notes><html><xhtml:p>- - Wrap D3. Generate JS/HTML from clojure: C2. https://keminglabs.com/c2/</xhtml:p><xhtml:p>- - Call D3 from ClojureScript: strokes. https://github.com/dribnet/strokes</xhtml:p><xhtml:p>- - Discussion on SO: https://stackoverflow.com/questions/22770029/running-d3-js-in-clojure</xhtml:p></html><plain>- - Wrap D3. Generate JS/HTML from clojure: C2. https://keminglabs.com/c2/
- - Call D3 from ClojureScript: strokes. https://github.com/dribnet/strokes
- - Discussion on SO: https://stackoverflow.com/questions/22770029/running-d3-js-in-clojure</plain></notes></topic></topics></children></topic></topics></children></topic><topic branch="folded" id="7jcgdb8tfqhp35h4s1graeqji4" timestamp="1421079261273"><title>Cloud-based system</title><children><topics type="attached"><topic branch="folded" id="13olpe525krgtr4urt73baatr8" timestamp="1421079261273"><title>Live collab</title></topic><topic branch="folded" id="6ss5r2rgnkc50m1q3aa47e5tk4" timestamp="1421079261274"><title>Server farm doing contraints/computation</title></topic><topic branch="folded" id="5g5jcpp1pv8lsolaqfa7jkrv7b" timestamp="1421079261274"><title>Storage system</title></topic></topics></children></topic></topics></children></topic><topic branch="folded" id="1b801c3srp9gorachg52rdeamj" timestamp="1421619397043"><title>Tips and tricks</title><children><topics type="attached"><topic branch="folded" id="6aqbgl5n1jii2f90vkovr8sfct" timestamp="1421079261275"><title>Deep code-walking macros</title><notes><html><xhtml:p>http://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/</xhtml:p></html><plain>http://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/</plain></notes></topic><topic branch="folded" id="4qkt6dh6cgdb0lf9f004gr63r9" timestamp="1421619389281"><title>Important data structures</title><children><topics type="attached"><topic branch="folded" id="5443l0a1emcite9q05rpuqdvji" timestamp="1421079261276"><title>Zippers/finger trees for fast editing around an edit point</title><notes><html><xhtml:p>https://pavpanchekha.com/blog/zippers/huet.html</xhtml:p><xhtml:p>http://scienceblogs.com/goodmath/2010/04/26/finger-trees-done-right-i-hope/</xhtml:p><xhtml:p/><xhtml:p>Understanding finger trees requires understanding monoids:</xhtml:p><xhtml:p>	http://fsharpforfunandprofit.com/posts/monoids-without-tears/</xhtml:p></html><plain>https://pavpanchekha.com/blog/zippers/huet.html
http://scienceblogs.com/goodmath/2010/04/26/finger-trees-done-right-i-hope/

Understanding finger trees requires understanding monoids:
	http://fsharpforfunandprofit.com/posts/monoids-without-tears/</plain></notes></topic></topics></children></topic><topic branch="folded" id="7qjfvfb3418cbnm5h9s7b3dfau" timestamp="1421079261276"><title>Doxygen lets you derive code structure</title><notes><html><xhtml:p>http://www.stack.nl/~dimitri/doxygen/</xhtml:p></html><plain>http://www.stack.nl/~dimitri/doxygen/</plain></notes></topic></topics></children></topic><topic id="1sa1ck2rp1s6p1mbmg3tif5l11" timestamp="1421438673944"><title>Toolchain</title><children><topics type="attached"><topic branch="folded" id="0njv1of4arolc6c579jn9e6p6q" style-id="0cloeturojptbcmld4op7rolr6" timestamp="1421079261278"><title>Clojure or Clojurescript?</title><marker-refs><marker-ref marker-id="symbol-question"/></marker-refs></topic><topic id="73sfrups730831u9d58ste6sr1" timestamp="1421438587305"><title>Clojure tools</title><children><topics type="attached"><topic branch="folded" id="4hnvcqdsl15l8qpbgu1p57qfpe" timestamp="1421079261279"><title>Light Table</title></topic><topic branch="folded" id="1an9gmu88f9d2q1ilmlm614m94" timestamp="1421079261279"><title>Vim actually makes a nice clojure IDE with a couple of plugins.</title><notes><html><xhtml:p>http://www.zeespencer.com/the-vim-lovers-guide-to-editing-clojure/</xhtml:p><xhtml:p>https://github.com/clojuredocs/guides/blob/master/articles/tutorials/vim_fireplace.md</xhtml:p><xhtml:p>http://www.mybuddymichael.com/writings/writing-clojure-with-vim-in-2013.html</xhtml:p><xhtml:p/><xhtml:p>Clojure-relevant vim plugins:</xhtml:p><xhtml:p>vim-fireplace, rainbow_parentheses.vim, vim-leiningen, paredit.vim, vim-dispatch, vim-projectionist</xhtml:p><xhtml:p/><xhtml:p>.vimrc stuff:</xhtml:p><xhtml:p>" Map \ to leader for paredit (Clojure) (should be at top of .vimrc)</xhtml:p><xhtml:p>let g:paredit_leader = '\'</xhtml:p><xhtml:p/><xhtml:p>" - Rainbow parens</xhtml:p><xhtml:p>au VimEnter * RainbowParenthesesToggle</xhtml:p><xhtml:p>au Syntax * RainbowParenthesesLoadRound</xhtml:p><xhtml:p>au Syntax * RainbowParenthesesLoadSquare</xhtml:p><xhtml:p>au Syntax * RainbowParenthesesLoadBraces</xhtml:p><xhtml:p/></html><plain>http://www.zeespencer.com/the-vim-lovers-guide-to-editing-clojure/
https://github.com/clojuredocs/guides/blob/master/articles/tutorials/vim_fireplace.md
http://www.mybuddymichael.com/writings/writing-clojure-with-vim-in-2013.html

Clojure-relevant vim plugins:
vim-fireplace, rainbow_parentheses.vim, vim-leiningen, paredit.vim, vim-dispatch, vim-projectionist

.vimrc stuff:
" Map \ to leader for paredit (Clojure) (should be at top of .vimrc)
let g:paredit_leader = '\'

" - Rainbow parens
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
</plain></notes></topic></topics></children></topic><topic id="2n4ur0prhvli7r4vdulli01ksc" timestamp="1421438591434"><title>Libraries</title><children><topics type="attached"><topic branch="folded" id="7jjoa9erhqspjdlmjkh8qajbeg" timestamp="1421079261280" xlink:href="http://www.clojure-toolbox.com/"><title>Clojure-toolbox: List of libraries for various purposes</title></topic><topic branch="folded" id="56gdfnu184ous0d29m40781ips" timestamp="1421079261281"><title>Expectations (unit testing)</title><notes><html><xhtml:p>https://semaphoreapp.com/blog/2014/09/23/testing-clojure-with-expectations.html</xhtml:p><xhtml:p/></html><plain>https://semaphoreapp.com/blog/2014/09/23/testing-clojure-with-expectations.html
</plain></notes></topic><topic branch="folded" id="7umfdv4nh8l572645b8ol731ii" timestamp="1421079261281" xlink:href="http://hoplon.io/"><title>Hoplon (front-to-back clj for web)</title></topic></topics></children></topic></topics></children></topic><topic id="4m112n0d4gbv6tglvu34f8rsu5" timestamp="1423349349640"><title>Functionality</title><children><topics type="attached"><topic id="75bijbml6mc5fnonorfilmiqe6" timestamp="1424470798874"><title>UI/Display</title><children><topics type="attached"><topic id="4emip5e2pnhfgbrgu4fiu6e480" timestamp="1421438757715"><title>Web UI or traditional desktop</title><children><topics type="attached"><topic id="3vpa893dr8auhkn3brgsj6r4k4" timestamp="1421438731439"><title>Web</title><children><topics type="attached"><topic id="07c5drlrpcvv60dcj199o95d85" timestamp="1421438731997"><title>View technology</title><children><topics type="attached"><topic id="2n2p2nd5gd7rvgamd0lqps38vs" timestamp="1421465417595"><title>Om/React as view?</title><notes><html><xhtml:p>Om: https://github.com/swannodette/om</xhtml:p><xhtml:p/><xhtml:p>This blog post from Prismatic shows how Om/React are extremely well-suited to our problem:</xhtml:p><xhtml:p>	http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/</xhtml:p><xhtml:p/><xhtml:p>"Why did we build React?" https://facebook.github.io/react/blog/2013/06/05/why-react.html</xhtml:p><xhtml:p/><xhtml:p>David Nolen talking about it while being super-hawt: https://www.youtube.com/watch?v=mS264h8KGwk#t=16</xhtml:p><xhtml:p/></html><plain>Om: https://github.com/swannodette/om

This blog post from Prismatic shows how Om/React are extremely well-suited to our problem:
	http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/

"Why did we build React?" https://facebook.github.io/react/blog/2013/06/05/why-react.html

David Nolen talking about it while being super-hawt: https://www.youtube.com/watch?v=mS264h8KGwk#t=16
</plain></notes></topic></topics></children></topic><topic id="3ua75dba02ri266s6mjv43g8mp" timestamp="1421438725227"><title>Node-webkit?</title></topic></topics></children></topic><topic id="7qanp40vb8mt231rb9kc923h3p" timestamp="1421438740653"><title>Desktop</title></topic></topics></children><marker-refs><marker-ref marker-id="symbol-question"/></marker-refs></topic><topic id="75e41lv9ofhgl5d3ipvop1r8hk" timestamp="1423161747081"><title>Other views (eg Gantt charts). Think about how to represent.</title></topic><topic id="08f1m3p46mn7alsukmm44a3krg" timestamp="1424470802294"><title>Text console</title></topic></topics></children></topic><topic id="1s39j7p0qeksqcmh8hav8rf1ob" timestamp="1423349502414"><title>Serialization</title><children><topics type="attached"><topic id="3vp8a1cqh4l4vge4ll59trnbke" timestamp="1423529110407"><title>For saving</title><children><topics type="attached"><topic id="5u5en1erm0403n2fvfijqu4a5n" timestamp="1423529132340"><title>EDN</title><notes><html><xhtml:p>https://github.com/edn-format/edn</xhtml:p><xhtml:p/></html><plain>https://github.com/edn-format/edn
</plain></notes></topic></topics></children></topic><topic id="06g9tmke684h5qph1f7lf1olbn" timestamp="1423349284228"><title>For collaboration</title></topic></topics></children><notes><html><xhtml:p>defprotocol for shared interface for all forms of serialization</xhtml:p><xhtml:p/><xhtml:p/></html><plain>defprotocol for shared interface for all forms of serialization

</plain></notes><marker-refs><marker-ref marker-id="people-purple"/></marker-refs></topic><topic id="21p4c56brtv1p8u8tn0th6imhc" timestamp="1423349354839"><title>Merge/diff</title><children><topics type="attached"><topic id="4hjje7p7jg7jfco0u9ltmeimse" timestamp="1423349405122"><title>Initially git</title><notes><html><xhtml:p>For alpha: not in software at all, but ensure save format is git-friendly</xhtml:p><xhtml:p/><xhtml:p>For 1.0: software has layer for manipulating history</xhtml:p><xhtml:p/></html><plain>For alpha: not in software at all, but ensure save format is git-friendly

For 1.0: software has layer for manipulating history
</plain></notes></topic></topics></children></topic></topics></children></topic></topics><topics type="detached"><topic id="5tv0qib3rd4bpp623sabjoicls" timestamp="1420761147890"><title>Terminology</title><position svg:x="135" svg:y="-121"/><notes><html><xhtml:p>(Mentioned only if non-standard)</xhtml:p><xhtml:p/><xhtml:p>Connection: broadly, any connection or relationship between two nodes. May turn out to be == to 'edge', but not certain yet.</xhtml:p><xhtml:p/><xhtml:p>Dependency: replace with either 'import dependency' when it's purely in code, or 'task dependency' if it's about supporting scheduling/WBS/etc. Some 3rd sort? Not that I can think of offhand.</xhtml:p><xhtml:p/><xhtml:p>Mindmap: a document like this one, a snapshot at a moment in time.</xhtml:p><xhtml:p/><xhtml:p>Hypermap: the git-like DAG of all mindmaps.</xhtml:p></html><plain>(Mentioned only if non-standard)

Connection: broadly, any connection or relationship between two nodes. May turn out to be == to 'edge', but not certain yet.

Dependency: replace with either 'import dependency' when it's purely in code, or 'task dependency' if it's about supporting scheduling/WBS/etc. Some 3rd sort? Not that I can think of offhand.

Mindmap: a document like this one, a snapshot at a moment in time.

Hypermap: the git-like DAG of all mindmaps.</plain></notes></topic></topics></children></topic><title>Sheet 1</title></sheet></xmap-revision-content>