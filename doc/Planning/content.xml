<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-content xmlns="urn:xmind:xmap:xmlns:content:2.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" timestamp="1420128839981" version="2.0"><sheet id="7kmrtbh52tf9vknflson7sspu7" theme="xminddefaultthemeid2014" timestamp="1420128839981"><topic id="0ea3fbl4cejvsje8r30kcj5865" structure-class="org.xmind.ui.map.unbalanced" timestamp="1419712010702"><title>Mind map project</title><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>3</right-number></content></extension></extensions><children><topics type="attached"><topic id="09r1agiobpf751nddlj1vkhks0" timestamp="1419482129933"><title>Data representation</title><children><topics type="attached"><topic id="6ci0h13824jp75g1rkufcko2kq" timestamp="1419112116450"><title>History/Time</title><children><topics type="attached"><topic id="2tapo6c0nfckkp4ci8haa6162q" timestamp="1419112090842"><title>Time Annotation an orgthogonal property ?</title></topic><topic id="7rgk9mvhr9gpq0lskr4ne52pak" timestamp="1419116020332"><title>"Continuous" Time ?</title><children><topics type="attached"><topic id="37uhn9dg5pe84ous4lgepsmmes" timestamp="1419112114499"><title>Every char?</title></topic><topic id="4vjp26007qdmcu78256v4ifr6r" timestamp="1419112114506"><title>Every commit?</title></topic><topic branch="folded" id="78v9seusiafudjtolhl5pi0djn" timestamp="1419167282634"><title>Advantages of continuous time:</title><children><topics type="attached"><topic id="04mbm3vd9k5jiu345a51fv75t1" timestamp="1419116032616"><title>Real-time collaboration</title></topic><topic id="5sq1atq240c6t7mtgt5fhvhkj7" timestamp="1419116050416"><title svg:width="500">More accurate for automated analysis (resource use, retrospectives, etc)</title></topic><topic id="5hf1kvq9vhdu6dc7bnd8pa5qi3" timestamp="1419116061223"><title>Finer-grained merge visualization</title></topic><topic id="7vuo2jscbi9gsj5gihk1bs0oq8" timestamp="1419116086390"><title svg:width="500">Finer-grained visualization of dependencies as they emerge</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="1gv3n799haruqfu8hkadt2a7f5" timestamp="1419557143675"><title>Structure</title><children><topics type="attached"><topic id="3g12ed5cjhbl09nt3nqbpk6t4g" style-id="3det9qvrqmlk8vg4a3pl386nb6" timestamp="1419185750651"><title>Directed Cyclic Graph? Or Directed Acyclic Graph?</title><children><topics type="attached"><topic id="26rfos3hb13332upmgmstmirf1" timestamp="1419129943886"><title>You can turn any DCG into a DAG through modular decomposition</title><notes><html><xhtml:p>https://en.wikipedia.org/wiki/Modular_decomposition</xhtml:p><xhtml:p/><xhtml:p>http://openclassroom.stanford.edu/MainFolder/VideoPage.php?course=IntroToAlgorithms&amp;video=CS161L6P1</xhtml:p><xhtml:p/><xhtml:p>The clojure.algo.graph library will handle some of that for us: https://github.com/clojure/algo.graph/blob/master/src/main/clojure/clojure/algo/graph.clj</xhtml:p><xhtml:p>(see the component-graph function)</xhtml:p><xhtml:p/><xhtml:p>This works in linear time (on #nodes + #edges).</xhtml:p></html><plain>https://en.wikipedia.org/wiki/Modular_decomposition

http://openclassroom.stanford.edu/MainFolder/VideoPage.php?course=IntroToAlgorithms&amp;video=CS161L6P1

The clojure.algo.graph library will handle some of that for us: https://github.com/clojure/algo.graph/blob/master/src/main/clojure/clojure/algo/graph.clj
(see the component-graph function)

This works in linear time (on #nodes + #edges).</plain></notes></topic><topic id="67a5lnmoh2lf02vrft2kuvad84" timestamp="1420128819005"><title>Argument for DCG:</title><notes><html><xhtml:p>Keeps us safely general. Helps us avoid the risk that one special relationship will turn into a whole host, many of which we can't possibly anticipate (related: think about where we can provide generalization facilities for stuff like that). Can be turned into DAG when we need to, perhaps identifying implicit packages along the way.</xhtml:p></html><plain>Keeps us safely general. Helps us avoid the risk that one special relationship will turn into a whole host, many of which we can't possibly anticipate (related: think about where we can provide generalization facilities for stuff like that). Can be turned into DAG when we need to, perhaps identifying implicit packages along the way.</plain></notes><children><topics type="attached"><topic id="4h803ic31qelul4v2cdkqq80gi" timestamp="1420128839981"><title>Warning: recursive println gets weird.</title></topic></topics></children></topic><topic id="644bf0mt6ig74ne2v4ppu9jru1" timestamp="1419557422394"><title>Argument for DAG:</title><notes><html><xhtml:p>Seems like mind maps themselves are basically DAGs (see this one, for example). DAGs give us some nice advantages in terms of simplicity of implementation, efficiency, and abilities (eg may be impossible to auto-generate a unique codebase for a DCG where no connections are considered special). </xhtml:p><xhtml:p/><xhtml:p>Tree representations:</xhtml:p><xhtml:p>http://www.exampler.com/blog/2010/09/01/editing-trees-in-clojure-with-clojurezip/</xhtml:p><xhtml:p>https://stackoverflow.com/questions/1787708/representing-a-tree-in-clojure</xhtml:p><xhtml:p>http://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/</xhtml:p><xhtml:p/></html><plain>Seems like mind maps themselves are basically DAGs (see this one, for example). DAGs give us some nice advantages in terms of simplicity of implementation, efficiency, and abilities (eg may be impossible to auto-generate a unique codebase for a DCG where no connections are considered special). 

Tree representations:
http://www.exampler.com/blog/2010/09/01/editing-trees-in-clojure-with-clojurezip/
https://stackoverflow.com/questions/1787708/representing-a-tree-in-clojure
http://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/
</plain></notes></topic></topics></children><marker-refs><marker-ref marker-id="symbol-question"/></marker-refs><notes><html><xhtml:p>Some resources on graph and tree representation in clojure:</xhtml:p><xhtml:p/><xhtml:p>http://clj-me.cgrand.net/2010/01/16/graph-structured-stacks-in-clojure/</xhtml:p><xhtml:p>https://stackoverflow.com/questions/1787708/representing-a-tree-in-clojure</xhtml:p><xhtml:p>https://stackoverflow.com/questions/25843162/update-tree-in-clojure</xhtml:p><xhtml:p>https://stackoverflow.com/questions/14854780/traversing-iterating-visiting-trees-in-clojure</xhtml:p></html><plain>Some resources on graph and tree representation in clojure:

http://clj-me.cgrand.net/2010/01/16/graph-structured-stacks-in-clojure/
https://stackoverflow.com/questions/1787708/representing-a-tree-in-clojure
https://stackoverflow.com/questions/25843162/update-tree-in-clojure
https://stackoverflow.com/questions/14854780/traversing-iterating-visiting-trees-in-clojure</plain></notes></topic><topic id="5ivlj9md13qs7dlk49ctsiq4f0" timestamp="1419112323017"><title svg:width="500">Time could be a DCG with each "moment" a DCG "slice" connected to the next  - i.e. DAG</title></topic><topic id="1sihvtkql4sqh4558c3jt0i1mv" timestamp="1419112330408"><title>Immutable</title></topic><topic id="67v5870b2lf5p50gks953nokqg" timestamp="1419112419368"><title>Node</title><children><topics type="attached"><topic id="0of752rkjpg3np2d1h104t5g9u" timestamp="1419112430525"><title>Artifacts from nodes ?</title></topic></topics></children></topic><topic id="2sp1e6cbdaja57o717msrutph6" timestamp="1419180396902"><title>Need to add abstraction to imports to support reparenting nodes?</title></topic><topic id="0hlgbmem2on6gf30vpqmosorc5" timestamp="1419557255593"><title>Plan on adding attributes to both nodes and edges.</title><notes><html><xhtml:p>See comments 1 &amp; 2 of this article: http://clj-me.cgrand.net/2010/01/16/graph-structured-stacks-in-clojure/#comment-221</xhtml:p><xhtml:p/><xhtml:p>Also:</xhtml:p><xhtml:p>http://www.geeksforgeeks.org/graph-and-its-representations/</xhtml:p><xhtml:p>https://www.python.org/doc/essays/graphs/</xhtml:p><xhtml:p/></html><plain>See comments 1 &amp; 2 of this article: http://clj-me.cgrand.net/2010/01/16/graph-structured-stacks-in-clojure/#comment-221

Also:
http://www.geeksforgeeks.org/graph-and-its-representations/
https://www.python.org/doc/essays/graphs/
</plain></notes></topic></topics></children></topic></topics></children></topic><topic id="2pvif84vodb9ltjojlg8h8vnk2" timestamp="1419712661255"><title>Core Value-Add</title><children><topics type="attached"><topic id="3pbp1l3vc8ltac24ra214oo761" timestamp="1419396280117"><title>Project management tool</title><children><topics type="attached"><topic id="0gil6omb9q1jsg6qhs3p7jfvdh" timestamp="1419114008800"><title>Interface to traditional PM</title></topic><topic id="50jjq48ceg6ti68tl4bakpn9tj" timestamp="1419114033142"><title>Can provide more accuracy to estimates and resource planning</title></topic><topic id="2fs6bg4r8kh36rknu8sdf5j8rv" timestamp="1419114042911"><title>Better automatic project analysis</title></topic><topic id="74msprgqogvq5g6doo7e84l064" timestamp="1419114194004"><title>High degree of flexibility in queries attributes</title><children><topics type="attached"><topic id="1837ont3gjukbeq415saqdu24r" timestamp="1419114069818"><title>Consider SQL</title></topic></topics></children></topic><topic id="7i8ifabm81vvajnsdqb6umiabe" timestamp="1419396310680"><title>Document attachment and/or linking.</title><children><topics type="attached"><topic id="6b1ghosev0f2rki46juil86agg" timestamp="1419396310675"><title>Document provenance built deeply in. Canonical location for supporting documents.</title></topic></topics></children></topic><topic id="5smmvrkjg5721ntovrevlifmig" timestamp="1419114805790"><title>Dependency management</title></topic><topic id="6h4kr51lhps6c2p6s664ndi7mn" timestamp="1419114811878"><title>Charting</title></topic></topics></children></topic><topic id="6k36hghrmmort79pbp3b8r4qri" timestamp="1419115058054"><title>IDE</title><children><topics type="attached"><topic id="0tmvtq97d2bgqktqkh92hg5t6l" timestamp="1419113193349"><title>eases refactoring</title></topic><topic id="5558g6a0u49tuje3rnjmnt84us" timestamp="1419113219102"><title>"Architectural" documentation is self explanatory</title></topic><topic id="7son361lcsmvn40vqk4ln3ths4" timestamp="1419114143136"><title>True language-independant literate programming</title></topic><topic id="2rucnd1hcl8iv3i0vmlgfp4ul7" timestamp="1419114427417"><title>Mind map is *canonical* representation of codebase</title></topic><topic id="3fcas9pbsp9qkjpitjctfqgjm6" timestamp="1419114439233"><title>Separation between planning and development vanishes</title></topic><topic id="52e497hsk454k09pmk94kgpbl0" timestamp="1419114574297"><title>Critical that existing projects can be imported</title><children><topics type="attached"><topic id="2vje3hrfep35roafscmdcf87cl" timestamp="1419114553149"><title>We don't want to write the damn editor.</title></topic><topic id="25i1tj295nmv9uj5og37ne1c4s" timestamp="1419114583476"><title>Ideally, be editor-agnostic</title></topic></topics></children></topic><topic id="7pqc1jffoli41rqu2gh7op4q83" timestamp="1419115271060"><title>Per-language specialization as needed</title><children><topics type="attached"><topic id="34p8blleho852flsdvtg7smhhh" timestamp="1419114656530"><title>What build tool to invoke and how</title></topic><topic id="6t5j3ns3jek88tdkbolbnbria2" timestamp="1419114670569"><title>Constraints on, eg, one-class-per-file</title></topic><topic id="3t9lm82bcq4r1dr07ghsi3gsc6" timestamp="1419115272896"><title>REPL</title></topic></topics></children></topic><topic id="1m7vth3jplb72abdqfsvf3r3ts" timestamp="1419114700365"><title>To what extent can we provide:</title><children><topics type="attached"><topic id="491t07r8c0fpn3doqsj5pe04tf" timestamp="1419114699601"><title>Dataflow visualization</title></topic><topic id="1ndptpeqv119c7o5hon99mi712" timestamp="1419114709064"><title>Context-sensitive REPL</title></topic></topics></children></topic><topic id="1rghb95ehq2ssehnee4rcuag2j" timestamp="1419114990016"><title>Handling test functions?</title><children><topics type="attached"><topic id="3a832gug1jr1r6oe496voc3i0d" timestamp="1419114997587"><title>Doctest as interesting literate example</title></topic></topics></children></topic><topic id="35vu51es7v0b4agg53kpdcop13" timestamp="1419115086125"><title>Consider representation as an approximate DAG</title><children><topics type="attached"><topic id="7eujb566iv1ka07rac4vrqv20j" timestamp="1419115092849"><title>Non-DAG as code smell</title></topic></topics></children></topic><topic id="1qej8lmvbtvqc1t0unmofahdqb" timestamp="1419396333036"><title>Auto-detect cross-cutting concerns</title><children><topics type="attached"><topic id="2468k0vdu1jbpc9dis3d1hfuns" timestamp="1419396333031"><title>Calls to libraries outside the project don't count (by default). Other modules called by many functions can be assumed to be cross-cutting concerns.</title></topic></topics></children></topic></topics></children></topic><topic id="5d6it1f9vij8eom286306epitv" timestamp="1419112409138"><title>Git 2.0 ?</title></topic><topic id="48r5c26o0kghomdrq7sr7jtamn" timestamp="1419113971469"><title>Merge Tool</title></topic><topic id="1se2u5i0u70l2cmbmv70b18sjv" timestamp="1419114187363"><title>Contraint programming as first class operation</title></topic><topic id="393n133i8cprr3ck238as6hepu" timestamp="1419125500215"><title>Reactive capabilities</title><children><topics type="attached"><topic id="3db8rs3p2bsg33nkt6oavlgs7i" timestamp="1419115139967"><title>Allowed for from beginning</title></topic><topic id="3t78naado90dpsou1p7pl9im06" timestamp="1419125618590"><title>Chat transcript with links</title><notes><html><xhtml:p>Reactive programming! That was the term I was looking for.</xhtml:p><xhtml:p>6:04 PM	</xhtml:p><xhtml:p/><xhtml:p>Inline image 1</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>Huh, don't think I've heard that before</xhtml:p><xhtml:p>6:05 PM</xhtml:p><xhtml:p>Subset of dataflow languages.https://en.wikipedia.org/wiki/Reactive_programming</xhtml:p><xhtml:p>Sounds like it makes an interesting strategy for web programming, which I hadn't thought of.</xhtml:p><xhtml:p>6:12 PM	</xhtml:p><xhtml:p/><xhtml:p>Inline image 2</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>Riiiight, exactly reactive.   </xhtml:p><xhtml:p>;)</xhtml:p><xhtml:p>6:16 PM</xhtml:p><xhtml:p>^ Sarcasm?</xhtml:p><xhtml:p>http://radar.oreilly.com/2012/12/emerging-languages-spotlight-elm.html</xhtml:p><xhtml:p>https://pypi.python.org/pypi/Trellis</xhtml:p><xhtml:p>6:17 PM	</xhtml:p><xhtml:p/><xhtml:p>Inline image 3</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>Lol, nope not sarcastic</xhtml:p><xhtml:p>6:18 PM</xhtml:p><xhtml:p>I like the idea of callback management as a language feature.</xhtml:p><xhtml:p>OK, one more link: Pulsar lets you do functional reactive programming in Clojure:http://blog.paralleluniverse.co/2014/02/20/reactive/</xhtml:p><xhtml:p/><xhtml:p>[Later addendum] see also Facebook's React library: https://facebook.github.io/react/docs/why-react.html</xhtml:p><xhtml:p>Clojurescript wrapper for React: http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/</xhtml:p><xhtml:p/></html><plain>Reactive programming! That was the term I was looking for.
6:04 PM	

Inline image 1
	
Huh, don't think I've heard that before
6:05 PM
Subset of dataflow languages.https://en.wikipedia.org/wiki/Reactive_programming
Sounds like it makes an interesting strategy for web programming, which I hadn't thought of.
6:12 PM	

Inline image 2
	
Riiiight, exactly reactive.   
;)
6:16 PM
^ Sarcasm?
http://radar.oreilly.com/2012/12/emerging-languages-spotlight-elm.html
https://pypi.python.org/pypi/Trellis
6:17 PM	

Inline image 3
	
Lol, nope not sarcastic
6:18 PM
I like the idea of callback management as a language feature.
OK, one more link: Pulsar lets you do functional reactive programming in Clojure:http://blog.paralleluniverse.co/2014/02/20/reactive/

[Later addendum] see also Facebook's React library: https://facebook.github.io/react/docs/why-react.html
Clojurescript wrapper for React: http://blog.getprismatic.com/om-sweet-om-high-functional-frontend-engineering-with-clojurescript-and-react/
</plain></notes></topic></topics></children></topic><topic id="4jcosh9c278m4gsi141ml0cf9e" timestamp="1419396704146"><title>Ontology Mining</title><children><topics type="attached"><topic id="63so91fkkilkomugukuvl00d91" timestamp="1419361910404"><title>Live analysis of project 'health' </title></topic><topic id="16hms6uv91iodnvfug7t7gn0m1" timestamp="1419361928122"><title>Create vetted ontologies as training data for ML</title></topic><topic id="6adbobgfrempkqbg2mdjflp5gf" timestamp="1419361993387"><title>Live training of our own ontologies via deep learning on internal data</title></topic></topics></children></topic></topics></children></topic><topic id="0q6720c31p5i7nu2pnrqbqfu31" timestamp="1419114723224"><title>Novel visualizations</title><children><topics type="attached"><topic id="3btgllks94d7bo3aq4oat58a00" timestamp="1419114323801"><title>Fade out all nodes that don't meet constraint/query</title></topic><topic id="064mbvuq2st3mj1ecm61cl1fnn" timestamp="1419114400657"><title>Automatic view restructing</title></topic><topic id="5uqdnf8p5iqjb070lo7lu2g0cu" timestamp="1419123953818"><title>Outline view (not novel)</title><notes><html><xhtml:p>Simple tree examination:</xhtml:p><xhtml:p/><xhtml:p>(use '[clojure.inspector :only (inspect inspect-tree)])</xhtml:p><xhtml:p>(inspect-tree {:clojure {:creator "Rich" :runs-on-jvm true}})</xhtml:p><xhtml:p/><xhtml:p>http://tech.puredanger.com/2010/02/10/clojure-inspector/</xhtml:p></html><plain>Simple tree examination:

(use '[clojure.inspector :only (inspect inspect-tree)])
(inspect-tree {:clojure {:creator "Rich" :runs-on-jvm true}})

http://tech.puredanger.com/2010/02/10/clojure-inspector/</plain></notes></topic><topic id="1dsb686it6ap070reur588teeu" timestamp="1419114739380"><title>How to visualize execution-level time</title></topic></topics></children></topic><topic id="0u7t7e1glg2ujmecd32lu9iesr" timestamp="1419395080845"><title>Examples</title><children><topics type="attached"><topic id="7vpksodot7rd6a5scsm120bprp" timestamp="1419115407739"><title>LEO</title></topic><topic id="61lh2gmoj6id95vsda3iboqgfl" timestamp="1419115412560"><title>Mind map software</title></topic><topic id="1deqbphujptpdn00hjvj9uh5un" timestamp="1419711034070"><title>Emacs: org-mode and babel</title><notes><html><xhtml:p>http://orgmode.org/worg/org-contrib/babel/intro.html</xhtml:p></html><plain>http://orgmode.org/worg/org-contrib/babel/intro.html</plain></notes></topic><topic id="3vdgbscf55f72cig8c8kpak6bp" timestamp="1419395085591"><title>Bret Victor</title></topic></topics></children></topic><topic id="6a5s0vqg84duhbe1lg0325jfuu" timestamp="1419712010617"><title>Rough implementation phases</title><children><topics type="attached"><topic id="713e9hvs7e4rrmirs0jr1k2ig0" timestamp="1419115737415"><title>Data representation</title><children><topics type="attached"><topic id="02a9l2dum5u395kce70moiuq9r" timestamp="1419115763795"><title>File representation of mm (and preparation for git integration)</title></topic></topics></children></topic><topic id="41o2jueqat6usqlte2cq4r7bqh" timestamp="1419115447689"><title>Text output</title></topic><topic id="6mm74olishvshtb8gja3uhr4qh" timestamp="1419115482118"><title>Node addition, refactoring</title></topic><topic id="1f3qbotp8aqui1609k1pc22fqs" timestamp="1419115508130"><title>Output-to-code</title></topic><topic id="3mhjttr63n8stjealthoc0i90d" timestamp="1419115556692"><title>Annotations which functions can be run on</title></topic><topic id="7jcgdb8tfqhp35h4s1graeqji4" timestamp="1419396649932"><title>Cloud-based system</title><children><topics type="attached"><topic id="13olpe525krgtr4urt73baatr8" timestamp="1419361870451"><title>Live colab</title></topic><topic id="6ss5r2rgnkc50m1q3aa47e5tk4" timestamp="1419361863430"><title>Server farm doing contraints/computation</title></topic><topic id="5g5jcpp1pv8lsolaqfa7jkrv7b" timestamp="1419361851036"><title>Storage system</title></topic></topics></children></topic><topic id="57k472uvq0q4vpglgea8t19ph0" timestamp="1419434438483"><title>Import of existing projects</title></topic></topics></children></topic><topic id="1b801c3srp9gorachg52rdeamj" timestamp="1419712660457"><title>Tips and tricks</title><children><topics type="attached"><topic id="6aqbgl5n1jii2f90vkovr8sfct" timestamp="1419124100117"><title>Deep code-walking macros</title><notes><html><xhtml:p>http://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/</xhtml:p></html><plain>http://blog.fogus.me/2013/07/17/an-introduction-to-deep-code-walking-macros-with-clojure/</plain></notes></topic><topic id="4qkt6dh6cgdb0lf9f004gr63r9" timestamp="1419168448343"><title>Important data structures</title><children><topics type="attached"><topic id="5443l0a1emcite9q05rpuqdvji" timestamp="1419168515282"><title>Zippers/finger trees for fast editing around an edit point</title><notes><html><xhtml:p>https://pavpanchekha.com/blog/zippers/huet.html</xhtml:p><xhtml:p>http://scienceblogs.com/goodmath/2010/04/26/finger-trees-done-right-i-hope/</xhtml:p><xhtml:p/><xhtml:p>Understanding finger trees requires understanding monoids:</xhtml:p><xhtml:p>	http://fsharpforfunandprofit.com/posts/monoids-without-tears/</xhtml:p></html><plain>https://pavpanchekha.com/blog/zippers/huet.html
http://scienceblogs.com/goodmath/2010/04/26/finger-trees-done-right-i-hope/

Understanding finger trees requires understanding monoids:
	http://fsharpforfunandprofit.com/posts/monoids-without-tears/</plain></notes></topic></topics></children></topic><topic id="7qjfvfb3418cbnm5h9s7b3dfau" timestamp="1419125684233"><title>Doxygen lets you derive code structure</title><notes><html><xhtml:p>http://www.stack.nl/~dimitri/doxygen/</xhtml:p></html><plain>http://www.stack.nl/~dimitri/doxygen/</plain></notes></topic></topics></children></topic><topic id="1sa1ck2rp1s6p1mbmg3tif5l11" timestamp="1419125748224"><title>Toolchain</title><children><topics type="attached"><topic id="0njv1of4arolc6c579jn9e6p6q" style-id="0cloeturojptbcmld4op7rolr6" timestamp="1419133505501"><title>Clojure or Clojurescript?</title><marker-refs><marker-ref marker-id="symbol-question"/></marker-refs></topic></topics></children></topic></topics><topics type="detached"><topic id="5tv0qib3rd4bpp623sabjoicls" timestamp="1419133987993"><title>Terminology</title><position svg:x="85" svg:y="-426"/><notes><html><xhtml:p>(Mentioned only if non-standard)</xhtml:p><xhtml:p/><xhtml:p>Connection: broadly, any connection or relationship between two nodes. May turn out to be == to 'edge', but not certain yet.</xhtml:p><xhtml:p/><xhtml:p>Dependency: replace with either 'import dependency' when it's purely in code, or 'task dependency' if it's about supporting scheduling/WBS/etc. Some 3rd sort? Not that I can think of offhand.</xhtml:p><xhtml:p/><xhtml:p/></html><plain>(Mentioned only if non-standard)

Connection: broadly, any connection or relationship between two nodes. May turn out to be == to 'edge', but not certain yet.

Dependency: replace with either 'import dependency' when it's purely in code, or 'task dependency' if it's about supporting scheduling/WBS/etc. Some 3rd sort? Not that I can think of offhand.

</plain></notes></topic></topics></children></topic><title>Sheet 1</title></sheet></xmap-content>